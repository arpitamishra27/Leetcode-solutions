"""Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.
Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first."""


class Solution(object):
    def tictactoe(self, moves):
        """
        :type moves: List[List[int]]
        :rtype: str
        """
        tic_tac=[['','',''],['','',''],['','','']]
        
        for i, (row, col) in enumerate(moves):
            if i % 2 == 0: 
                tic_tac[row][col] ='A'
            else: 
                tic_tac[row][col] ='B'
                
        if tic_tac[0][0]==tic_tac[0][1]==tic_tac[0][2] and tic_tac[0][0]!='':
            return tic_tac[0][0]
        elif tic_tac[1][0]==tic_tac[1][1]==tic_tac[1][2] and tic_tac[1][0]!='':
            return tic_tac[1][0]
        elif tic_tac[2][0]==tic_tac[2][1]==tic_tac[2][2] and tic_tac[2][0]!='':
            return tic_tac[2][0]
        elif tic_tac[0][0]==tic_tac[1][1]==tic_tac[2][2] and tic_tac[0][0]!='':
            return tic_tac[0][0]
        elif tic_tac[0][0]==tic_tac[1][0]==tic_tac[2][0] and tic_tac[0][0]!='':
            return tic_tac[0][0]
        elif tic_tac[0][1]==tic_tac[1][1]==tic_tac[2][1] and tic_tac[0][1]!='':
            return tic_tac[0][1]
        elif tic_tac[0][2]==tic_tac[1][2]==tic_tac[2][2] and tic_tac[0][2]!='':
            return tic_tac[0][2]
        elif tic_tac[0][2]==tic_tac[1][1]==tic_tac[2][0] and tic_tac[0][2]!='':
            return tic_tac[0][2]
        else:
            for i in tic_tac:
                if '' in i:
                    return "Pending"
        return "Draw"
            
                
        
        
                
