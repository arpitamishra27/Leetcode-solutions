"""Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]"""


class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        nums.sort()
        
        result=[]
        
        for i in range(0,len(nums)-3):
            if i>0 and nums[i]==nums[i-1]:
                continue
            rem=target-nums[i];
            
            for j in range(i+1,len(nums)-2):
                if j>i+1 and nums[j]==nums[j-1]:
                    continue
                ind3,ind4=j+1,len(nums)-1
                while ind3<ind4:
                    sum=nums[j]+nums[ind3]+nums[ind4]
                    if sum==rem:
                        result.append((nums[i],nums[j],nums[ind3],nums[ind4]))
                        ind4-=1;
                        while ind3<ind4 and nums[ind4]==nums[ind4+1]:
                            ind4-=1;
                    elif sum>rem:
                        ind4-=1
                    else:
                        ind3+=1
        return result
