""Given the root of a binary tree, return the sum of all left leaves.

A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 24
Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.
Example 2:

Input: root = [1]
Output: 0""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:
        sum_left=0
        if root is None:
	        return 0
        stack = [root]
        while stack:
            node = stack.pop()
            print(node)
            if node.left!= None:
                if node.left.left==None and node.left.right==None:
                    sum_left+= node.left.val
                else:
                    stack.append(node.left)
            if(node.right!=None):
                if(node.right.left!=None or node.right.right!=None):
                    stack.append(node.right)
        
        return sum_left
    
