""You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

Example 1:

Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0""

class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        
        max_area=0
        R=len(grid)
        C=len(grid[0])
        self.count=0
        
        def dfs(r,c):
            if grid[r][c]==1:
                self.count+=1
                grid[r][c]=0
                if r>=1:
                    dfs(r-1,c)
                if r<R-1:
                    dfs(r+1,c)
                if c>=1:
                    dfs(r,c-1)
                if c<C-1:
                    dfs(r,c+1)
        
        for i in range(R):
            for j in range(C):
                if grid[i][j]==1:
                    dfs(i,j)
                    if self.count>max_area:
                        max_area=self.count
                    self.count=0
            
        return max_area
                        
