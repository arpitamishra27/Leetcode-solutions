""Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.""


Python:

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        
        start=0
        end=0
        max_c=0
        ans=set()
        
        while end<len(s):
            while s[end] in ans:
                ans.remove(s[start])
                start+=1
            ans.add(s[end])
            
            max_c=max(max_c, end-start+1)
            end+=1
        return max_c
        
  Java:
  
   class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        if(s.length()<2)
            return s.length();
        
        int start = 0, end =  0;
        HashMap<Character, Integer> map = new HashMap<>();
        int maxcount = 0;
        
        while(end<s.length()){
            if(map.containsKey(s.charAt(end))){
                start = Math.max(start, map.get(s.charAt(end))+1);
            }
            
            maxcount = Math.max(maxcount, (end-start+1));
            map.put(s.charAt(end), end);
            end++;
        }
        
        return maxcount;
    }
}   
