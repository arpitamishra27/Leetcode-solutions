"""Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []"""

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        result=[];
        nums.sort()
        for i in xrange(len(nums)-2):
            
            if i>0 and nums[i]==nums[i-1]:
                continue;
            
            (ind2,ind3)=(i+1,len(nums)-1)
            
            while ind2<ind3 :
                sum=nums[i]+nums[ind2]+nums[ind3]
                if sum==0 :
                    result.append((nums[i],nums[ind2],nums[ind3]))
                    ind3-=1
                    while ind2<ind3 and nums[ind3]==nums[ind3+1] :
                        ind3-=1
                elif(sum>0):
                    ind3-=1
                    
                else:
                    ind2+=1
                    
        return result
            
