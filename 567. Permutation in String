""Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false""

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        
        ar1=[0]*26
        ar2=[0]*26
        
        l1=len(s1)
        l2=len(s2)
        match=0
        
        if l2<l1:
            return False
        
        for i in range (0,l1):
            ar1[ord(s1[i])-ord('a')]+=1
            ar2[ord(s2[i])-ord('a')]+=1
            
        for i in range(0,26):
            if ar1[i]==ar2[i]:
                match+=1
        
        l=0
        for r in range (l1,l2):
            if match==26:
                return True
            index=ord(s2[r])-ord('a')
            ar2[index]+=1
            if ar2[index]==ar1[index]:
                match+=1
            elif ar2[index]-1==ar1[index]:
                match-=1
            
            index=ord(s2[l])-ord('a')
            ar2[index]-=1
            if ar2[index]==ar1[index]:
                match+=1
            elif ar2[index]+1==ar1[index]:
                match-=1
            l+=1
        return match==26
